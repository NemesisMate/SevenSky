vec3 rotate(vec3 dir, vec3 x, vec3 y, vec3 z) {
    dir = vec3(dir.x*x.x + dir.y*y.x + dir.z*z.x,
            dir.x*x.y + dir.y*y.y + dir.z*z.y,
            dir.x*x.z + dir.y*y.z + dir.z*z.z);
    return dir;
}
void perpVectors(in vec3 dir, out vec3 store1, out vec3 store2) {
    /*if(abs(dir.x) > abs(dir.y)) store1 = normalize(vec3(dir.z, 0.0, -dir.x));             
    else store1 = normalize(vec3(0.0, -dir.z, dir.y));
	store2 = cross(dir, store1);*/

	if(abs(dir.x) > abs(dir.z)) store1 = normalize(vec3(0.0, dir.y, -dir.x));             
    else store1 = normalize(vec3(-dir.y, 0.0, dir.z));
	store2 = cross(dir, store1);

	
}
//N - fragment normal
//Nb - bump normal, result is N when Nbump is (0,1,0)
vec3 bump(vec3 N, vec3 Nb) {
	vec3 nX, nZ;
	perpVectors(Nb, nX, nZ);
	return rotate(N, nX, Nb, nZ);
}