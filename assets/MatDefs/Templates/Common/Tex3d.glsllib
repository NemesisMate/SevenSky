varying vec3 normal;

#ifdef VERT_TexCoord
varying vec2 texCoord;
#endif

#ifdef VERT_WorldPos
varying vec3 worldPos;
#endif

#ifdef VERT_WorldPosLocal
varying vec3 worldPosLocal;
#endif

#ifdef VERT_Pos
varying vec3 pos;
#endif

#ifndef VERT_NO_Norm
vec3 norm = normalize(normal);
#endif
float r = 0.0;
vec3 col = vec3(0.0);
float sampleHeight(vec2 uv);
float sampleHeight(vec3 uv);

//Random

float r_rand(float x) {
	return fract(floor(x)*0.7071067811865475);
}
float r_rand(vec2 uv) {
	vec2 v = floor(uv);

	float v1 = dot(v,v)+v.x*v.y;
	return fract((v1+floor(v1*0.007071067811865475))*0.7071067811865475);
	//return fract(v1*0.7071067811865475);
}
float r_rand(vec3 uv) {
	vec3 v = floor(uv);
	float v1 = dot(v,v);
	return fract((v1+floor(v1*0.007071067811865475))*0.7071067811865475);
}

float r_linear(float uv) {
	float a = r_rand(uv);
	float b = r_rand(uv+1.0);
	
	return mix(a,b,fract(uv));
}
float r_linear(vec2 uv) {
	float a = r_rand(uv);
	float b = r_rand(uv+vec2(1.0,0.0));
	float c = r_rand(uv+vec2(0.0,1.0));
	float d = r_rand(uv+vec2(1.0,1.0));

	vec2 fr = fract(uv);
	
	return mix(mix(a,b,fr.x), mix(c,d,fr.x),fr.y);
}
float r_cosine(vec2 uv) {
	float a = r_rand(uv);
	float b = r_rand(uv+vec2(1.0,0.0));
	float c = r_rand(uv+vec2(0.0,1.0));
	float d = r_rand(uv+vec2(1.0,1.0));

	vec2 fr = fract(uv);

	fr = (1.0-cos(fr*3.141592654))*0.5;
	
	return mix(mix(a,b,fr.x), mix(c,d,fr.x),fr.y);
}


//modifiers
vec2 m_dirwarp(vec2 uv, vec2 dir, float intensity) {
	return uv + dir*intensity;
}
vec3 m_dirwarp(vec3 uv, vec3 dir, float intensity) {
	return uv + dir*intensity;
}

//Distributors
vec2 d_tile(vec2 uv) {
	return mod(uv, 1.0)-0.5;
}
vec2 d_tile(vec2 uv, float size) {
	return mod(uv*size, size);//-size*0.5;
}
vec3 d_tile(vec3 uv, float size) {
	return mod(uv*size, size);//-size*0.5;
}

float d_brick(float x, float y, float off) {
	return x+step(1.0, mod(y,2.0))*off;
}

vec2 d_rotate(vec2 uv, vec2 uvO) {
	//float x = r_rand(uv)*2.0-1.0;
	//float y = sqrt(1.0-x*x);
	uv = uv*2.0-1.0;
	float a = r_rand(uvO)*3.14;
	float x = cos(a);
	float y = sin(a);
	
	return vec2(x*uv.x-y*uv.y,y*uv.x+x*uv.y)*0.5+0.5;
}
vec2 d_scale(vec2 uv, vec2 uvO, float m) {
	uv = uv*2.0-1.0;
	uv = uv / (r_rand(uvO)*(1.0-m)+m);;
	return uv*0.5+0.5;
} 

//Patterns
float p_checker(vec2 uv) {
	return step(1.0, mod(floor(uv.x) + floor(uv.y), 2.0));
}
float p_checker(vec3 uv) {
	return step(1.0, mod(floor(uv.x) + floor(uv.y) + floor(uv.z), 2.0));
}
//Shapes [-1,1]
float s_square(vec2 uv, float scale) {
	uv = abs(mod(uv, 1.0));
	return step(max(uv.x, uv.y), scale);
}
float s_cube(vec3 uv, float scale) {
	uv = mod(uv, 1.0);
	return step(max(max(uv.x, uv.y), uv.z), scale);
}
float s_disc(vec2 uv) {
	uv = uv*2.0-1.0;
	return step(dot(uv,uv), 1.0);
}
float s_discV(vec2 uv) {
	uv = uv*2.0-1.0;
	return sqrt(1.0-dot(uv,uv));
}
float s_sphere(vec3 uv) {
	uv = uv*2.0-1.0;
	return dot(uv,uv);
}
float s_sphereStep(vec3 uv) {
	uv = uv*2.0-1.0;
	return step(dot(uv,uv), 1.0);
}
float s_paraboloid(vec2 uv) {
	//uv = mod(uv, 1.0)-0.5;
	uv = uv*2.0-1.0;
	return max(1.0-max(dot(uv,uv), 0.0), 0.0);
}
float s_pyramid(vec2 uv, float scale) {
	uv = abs(mod(uv, 2.0)-1.0);
	float s = step(max(uv.x, uv.y), scale);
	return (1.0-abs(max(uv.x, uv.y)))*s;
}
float s_brick(vec2 uv, float size) {
	uv = abs(uv*2.0-1.0);
	float s = 1.0-min(length(max(2.0*(uv-size), vec2(0.0)))+size*2.0-1.0, 1.0);
	return s; //max(s*s, 0.0);

	//interesting wall pattern
	/*uv = abs(uv*2.0-1.0);
	float s = 1.0-max(uv.x, uv.y)*1.5;
	return max(s*s, 0.0);*/
	//end

	//uv = uv*2.0-1.0;
	//return 1.0-max(min((length(max(abs(2.0*uv)-0.5,0.0))-0.5), 1.0), -1.0);
	//return 1.0-min((length(max(abs(2.0*uv)-0.5,0.0))-0.5), 1.0);
}
float s_gradient(vec2 uv) {
	//uv = abs(mod(uv, 2.0));
	return uv.x;
}


vec4 quat(vec3 d, vec3 z) {
	vec4 quat = vec4(cross(z,d),
		sqrt(dot(z,z)*dot(d,d)) + dot(z,d));
	quat *= inversesqrt(dot(quat,quat));
	return quat;
}
vec3 qmult(vec4 q, vec3 v) { 
	return v + 2.0*cross(cross(v, q.xyz) + q.w*v, q.xyz);
}
float heightTriPlanar(vec3 uv, float e) { 
	float s = 0.0;
	//s = layer(uv.xz);

	vec2 p = uv.xy;
	vec3 n = pow(abs(norm), vec3(e));
	//n -= vec3(min(n.x,min(n.y,n.z)));
	n /= n.x+n.y+n.z;
	return dot(vec3(sampleHeight(uv.zy),sampleHeight(uv.xz),sampleHeight(uv.xy)), n);
}
float heightColTriPlanar(vec3 uv, float e) { 
	float s = 0.0;
	//s = layer(uv.xz);

	vec2 p = uv.xy;
	vec3 n = pow(abs(norm), vec3(e));
	//n -= vec3(min(n.x,min(n.y,n.z)));
	n /= n.x+n.y+n.z;

	vec3 cc;
	
	vec3 dd = vec3(0.0);
	dd.x = sampleHeight(uv.zy); cc = col*n.x; 
	dd.y = sampleHeight(uv.xz); cc += col*n.y;
	dd.z = sampleHeight(uv.xy); cc += col*n.z;
	col = cc;

	return dot(dd, n);
}
vec3 getN() {
	vec3 uv = worldPos;

	vec3 uvdx = dFdx(uv);
	vec3 uvdy = dFdy(uv);

	r = sampleHeight(uv);
	float rx = sampleHeight(uv+uvdx);
	float ry = sampleHeight(uv+uvdy);

	vec3 normF = normalize(cross(uvdx, uvdy));
	vec3 N = normalize(cross(uvdx + (rx - r)*normF, uvdy + (ry - r)*normF));
	vec4 q = quat(normF, N);
	return qmult(q, norm)*0.5+0.5;
}

#ifdef TEX_COL
	#define Tex3d(c,h,n,res) res=c;
#else
	#ifdef TEX_H
		#define Tex3d(c,h,n,res) res=vec3(h);
	#else 
		#ifdef TEX_N
			#define Tex3d(c,h,n,res) res=n*0.5+0.5;
		#else 
			#define Tex3d(c,h,n)
		#endif	
	#endif
#endif